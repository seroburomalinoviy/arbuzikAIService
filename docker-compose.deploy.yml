services:
  db:
    image: postgres:13
    # container_name: postgres
    command: ["postgres", "-c", "config_file=/etc/postgresql.conf"]
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
    #     PGPASSFILE: /run/secrets/pgpass_secret
    #   POSTGRES_DB_FILE: /run/secrets/arbuzik
    #   POSTGRES_USER_FILE: /run/secrets/arbuzik
    #   POSTGRES_PASSWORD_FILE: /run/secrets/arbuzik
    # secrets:
    #     - pgpass_secret
    #   - arbuzik
    env_file:
      - .env
    configs:
      - source: postgres_config
        target: /etc/postgresql.conf
        # target: /var/lib/postgresql/data/postgresql.conf
        # uid: "1002"
        # gid: "1002"
        # mode: 0777
    # ports:
    #   - '5432:5432'
    # restart: always
    volumes:
      - type: volume
        source: pg_data
        target: /var/lib/postgresql/data
      - /home/postgres/backups:/backups
    networks:
      - everywhere_overlay
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 7
        window: 51s
      # resources:
      #   limits:
      #     cpus: 1
      #     memory: 512M
      #   reservations:
      #     cpus: 0.5
      #     memory: 256M
      # update_config:
      #   parallelism: 1
      #   delay: 10s
      #   order: start-first
      #   monitor: 10s
      #   failure_action: pause
      # rollback_config:
      #   parallelism: 1
      #   delay: 20s
      #   failure_action: pause
      #   monitor: 0s 
      #   max_failure_ratio: 0
      #   order: start-first

  rabbitmq:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    # container_name: rabbitmq
    # restart: always
    environment:
      # - RABBITMQ_CONFIG_FILE=/etc/rabbitmq/rabbitmq.conf
      # - RABBITMQ_DEFAULT_USER_FILE=/run/secrets/arbuzik
      # - RABBITMQ_DEFAULT_PASS_FILE=/run/secrets/arbuzik
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
    env_file:
      - .env
    # secrets:
    #   - arbuzik
    configs:
      - source: rabbit_config
        target: /etc/rabbitmq/rabbitmq.conf
    ports:
      - "15672:15672"
      # - "5672:5672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 30s
      retries: 3
      start_period: 10s
    networks:
      - everywhere_overlay
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 5
        window: 50s
      # update_config:
      #   parallelism: 1
      #   delay: 10s
      #   order: start-first
      #   monitor: 10s
      #   failure_action: pause
      # rollback_config:
      #   parallelism: 1
      #   delay: 20s
      #   failure_action: pause
      #   monitor: 0s 
      #   max_failure_ratio: 0
      #   order: start-first
      # resources:
      #   limits:
      #     cpus: 2
      #     memory: 512M
      #   reservations:
      #     cpus: 1
      #     memory: 256M

  redis:
    # container_name: redis
    image: redis:7.2
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
      # - /bin/sh
      # - -c
      # # - Double dollars, so that the variable is not expanded by Docker Compose
      # # - Surround by quotes, so that the shell does not split the password
      # # - The ${variable:?message} syntax causes shell to exit with a non-zero
      # #   code and print a message, when the variable is not set or empty
      # - redis-server /usr/local/etc/redis.conf --requirepass "$${REDIS_PASSWORD:?REDIS_PASSWORD variable is not set}"
    # ports:
    #   - "6379:6379"
    # volumes:
      # - ./redis.conf:/usr/local/etc/redis/redis.conf
      # - /home/u603202/logs:/var/log/redis
    env_file:
      - .env
    configs:
      - source: redis_config
        target: /usr/local/etc/redis/redis.conf
        # uid: "103"
        # gid: "103"
        # mode: 0440
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - everywhere_overlay
    # restart:
    #   always
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 5
        window: 10s
      # resources:
      #   limits:
      #     cpus: 2
      #     memory: 512M
      #   reservations:
      #     cpus: 1
      #     memory: 256M
      # update_config:
      #   parallelism: 1
      #   delay: 10s
      #   order: start-first
      #   monitor: 10s
      #   failure_action: pause
      # rollback_config:
      #   parallelism: 1
      #   delay: 20s
      #   failure_action: pause
      #   monitor: 0s 
      #   max_failure_ratio: 0
      #   order: start-first

  preclient:
    # container_name: preclient
    image: localhost:5000/preclient:latest
    # build: ./preclient
    command: ["python", "main.py"]
    env_file:
      - .env
    networks:
      - everywhere_overlay
    # volumes:
      # - /home/u603202/logs:/logs
    # restart:
    #   always
    # depends_on:
    #   redis:
    #     condition: service_started
    #   rabbitmq:
    #     condition: service_healthy
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 50s
        max_attempts: 7
        window: 60s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        monitor: 10s
        failure_action: pause
      rollback_config:
        parallelism: 1
        delay: 20s
        failure_action: pause
        monitor: 0s 
        max_failure_ratio: 0
        order: start-first
      # resources:
      #   limits:
      #     cpus: 2
      #     memory: 512M
      #   reservations:
      #     cpus: 1
      #     memory: 256M

  client:
    # container_name: client
    image: localhost:5000/client:latest
    # build: ./client
    command: ["python", "main.py"]
    env_file:
      - .env
    # restart:
    #   always
    # depends_on:
    #   rabbitmq:
    #     condition: service_healthy
    #   redis:
    #     condition: service_started
    volumes:
      - type: volume
        source: media-data-volume
        target: /app/weights
      - type: volume
        source: voices-volume
        target: /app/media/user-voices
    networks:
      - everywhere_overlay
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 50s
        max_attempts: 6
        window: 60s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        monitor: 10s
        failure_action: pause
      rollback_config:
        parallelism: 1
        delay: 20s
        failure_action: pause
        monitor: 0s 
        max_failure_ratio: 0
        order: start-first
      # resources:
      #   limits:
      #     cpus: 7
      #     memory: 8G
      #   reservations:
      #     cpus: 3
      #     memory: 4G


  bot:
    # build: ./django_bot
    image: localhost:5000/bot:latest
    # container_name: bot
    command: ["python", "start_bot.py"]
    environment:
      POSTGRES_HOST: db
    env_file:
      - .env
    volumes:
      - type: volume
        source: voices-volume
        target: /app/media/user-voices
      - type: volume
        source: media-data-volume
        target: /app/media/data/
    networks:
      - everywhere_overlay
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 7
        window: 60s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        monitor: 10s
        failure_action: pause
      rollback_config:
        parallelism: 1
        delay: 20s
        failure_action: pause
        monitor: 0s 
        max_failure_ratio: 0
        order: start-first
      # resources:
      #   limits:
      #     cpus: 2
      #     memory: 512M
      #   reservations:
      #     cpus: 1
      #     memory: 256M


  django:
    # build: ./django_bot
    image: localhost:5000/django:latest
    # container_name: django
    command: sh -c 'python manage.py migrate --noinput && 
                    python manage.py collectstatic --noinput --clear &&
                    gunicorn config.asgi:application -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8081'
    environment:
      POSTGRES_HOST: db
    # expose:
    #   - 8000
    # depends_on:
    #   db:
    #     condition: service_started
    # restart:
    #   always
    env_file:
      - .env
    # secrets:
    #   - arbuzik
    # configs:
    #   - source: arb_config
    #     target: .env
    volumes:
      - type: volume
        source: media-data-volume
        target: /app/media/data/
      - type: volume
        source: static_volume
        target: /app/static
    networks:
      - everywhere_overlay
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 7
        window: 60s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        monitor: 10s
        failure_action: pause
      rollback_config:
        parallelism: 1
        delay: 20s
        failure_action: pause
        monitor: 0s 
        max_failure_ratio: 0
        order: start-first
      # resources:
      #   limits:
      #     cpus: 2
      #     memory: 512M
      #   reservations:
      #     cpus: 1
      #     memory: 256M

  proxy-server:
    # container_name: nginx
    image: nginx:latest
    ports:
      - "80:80"
      - "8001:8001"
      - "3000:3000"
    env_file:
      - .env
    volumes:
      # - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - type: volume
        source: static_volume
        target: /app/static
    # restart:
    #   always
    # depends_on:
    #   - django
    configs:
     - source: nginx_config
       target: /etc/nginx/conf.d/default.conf:ro
    networks:
      - everywhere_overlay
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 7
        window: 60s
      # update_config:
      #   parallelism: 1
      #   delay: 10s
      #   order: start-first
      #   monitor: 10s
      #   failure_action: pause
      # rollback_config:
      #   parallelism: 1
      #   delay: 20s
      #   failure_action: pause
      #   monitor: 0s 
      #   max_failure_ratio: 0
      #   order: start-first
      # resources:
      #   limits:
      #     cpus: 2
      #     memory: 512M
      #   reservations:
      #     cpus: 1
      #     memory: 256M

  payment-api:
    # container_name: payment-api
    image: localhost:5000/payment-api
    command: sh -c 'uvicorn api:app --host 0.0.0.0 --port 8001 --proxy-headers'
    expose:
      - 8001
    env_file:
      - .env
    networks:
      - everywhere_overlay
    # restart:
    #   always
    # volumes:
      # - /home/u603202/logs:/logs
    # depends_on:
    #   bot:
    #     condition: service_started
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 60s
      # update_config:
      #   parallelism: 1
      #   delay: 10s
      #   order: start-first
      #   monitor: 10s
      #   failure_action: pause
      # rollback_config:
      #   parallelism: 1
      #   delay: 20s
      #   failure_action: pause
      #   monitor: 0s 
      #   max_failure_ratio: 0
      #   order: start-first
      # resources:
      # limits:
      #   cpus: 2
      #   memory: 512M
      # reservations:
      #   cpus: 1
      #   memory: 256M

  payment-listener:
    # container_name: payment-listener
    image: localhost:5000/payment-api
    command: ["python", "main.py"]
    env_file:
      - .env
    networks:
      - everywhere_overlay
    # restart:
    #   always
    # volumes:
      # - /home/u603202/logs:/logs
    # depends_on:
    #   payment-api:
    #     condition: service_started
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 60s
      # update_config:
      #   parallelism: 1
      #   delay: 10s
      #   order: start-first
      #   monitor: 10s
      #   failure_action: pause
      # rollback_config:
      #   parallelism: 1
      #   delay: 20s
      #   failure_action: pause
      #   monitor: 0s 
      #   max_failure_ratio: 0
      #   order: start-first
      # resources:
      #   limits:
      #     cpus: 2
      #     memory: 512M
      #   reservations:
      #     cpus: 1
      #     memory: 256M

  celery-scheduler:
    # container_name: scheduler
    image: localhost:5000/django:latest
    command: celery --app config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    # depends_on:
    #   redis:
    #     condition: service_started
    #   bot:
    #     condition: service_started
    env_file:
      - .env
    networks:
      - everywhere_overlay
    # restart:
    #   always
    volumes:
      - type: volume
        source: voices-volume
        target: /app/media/user-voices
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 60s
      # update_config:
      #   parallelism: 1
      #   delay: 10s
      #   order: start-first
      #   monitor: 10s
      #   failure_action: pause
      # rollback_config:
      #   parallelism: 1
      #   delay: 20s
      #   failure_action: pause
      #   monitor: 0s 
      #   max_failure_ratio: 0
      #   order: start-first
      # resources:
      #   limits:
      #     cpus: 2
      #     memory: 512M
      #   reservations:
      #     cpus: 1
      #     memory: 256M

  celery-worker:
    image: localhost:5000/django:latest
    command: celery --app config worker --loglevel=info
    # depends_on:
    #   celery-scheduler:
    #     condition: service_started
    env_file:
      - .env
    volumes:
      - type: volume
        source: voices-volume
        target: /app/media/user-voices
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 60s
    networks:
      - everywhere_overlay

  grafana-monitor:
    image: grafana/grafana-oss
    restart: unless-stopped
    environment:
      - GF_LOG_LEVEL=info
      - GF_INSTALL_PLUGINS=redis-datasource
    expose:
      - 3000
    volumes:
      - grafana_storage:/var/lib/grafana
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 60s
    networks:
      - everywhere_overlay

configs:
  arb_config:
    external: true
  rabbit_config:
    file: ./rabbitmq.conf
  nginx_config:
    file: ./nginx.conf
  postgres_config:
    file: ./postgres.conf
  redis_config:
    file: ./redis.conf

# secrets:
#   # arbuzik:
#   #   file: .secrets
#   pgpass_secret:
#     file: ./pgpass.conf
networks:
  everywhere_overlay:
    driver: overlay

volumes:
  static_volume:
  media-data-volume:
  voices-volume:
  grafana_storage: {}
  pg_data:

