services:
  db:
    image: postgres:13
    # container_name: postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - '5432:5432'
    # restart: always
    volumes:
      - /home/postgres/db_data:/var/lib/postgresql/data
      - /home/postgres/backups:/backups
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 51s
      # resources:
      #   limits:
      #     cpus: 1
      #     memory: 512M
      #   reservations:
      #     cpus: 0.5
      #     memory: 256M
      # update_config:
      #   parallelism: 1
      #   delay: 10s
      #   order: start-first
      #   monitor: 10s
      #   failure_action: pause
      # rollback_config:
      #   parallelism: 1
      #   delay: 20s
      #   failure_action: pause
      #   monitor: 0s 
      #   max_failure_ratio: 0
      #   order: start-first

  rabbitmq:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    # container_name: rabbitmq
    # restart: always
    environment:
      - RABBITMQ_CONFIG_FILE=/etc/rabbitmq/rabbitmq.conf
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASSWORD}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 30s
      retries: 3
      start_period: 10s
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 50s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        monitor: 10s
        failure_action: pause
      rollback_config:
        parallelism: 1
        delay: 20s
        failure_action: pause
        monitor: 0s 
        max_failure_ratio: 0
        order: start-first
      # resources:
      #   limits:
      #     cpus: 2
      #     memory: 512M
      #   reservations:
      #     cpus: 1
      #     memory: 256M

  redis:
    # container_name: redis
    image: redis
    command:
      - /bin/sh
      - -c
      # - Double dollars, so that the variable is not expanded by Docker Compose
      # - Surround by quotes, so that the shell does not split the password
      # - The ${variable:?message} syntax causes shell to exit with a non-zero
      #   code and print a message, when the variable is not set or empty
      - redis-server /usr/local/etc/redis.conf --requirepass "$${REDIS_PASSWORD:?REDIS_PASSWORD variable is not set}"
    ports:
      - "6379:6379"
    # volumes:
      # - ./redis.conf:/usr/local/etc/redis/redis.conf
      # - ${LOGS_PATH}:/var/log/redis
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    # restart:
    #   always
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 10s
      # resources:
      #   limits:
      #     cpus: 2
      #     memory: 512M
      #   reservations:
      #     cpus: 1
      #     memory: 256M
      # update_config:
      #   parallelism: 1
      #   delay: 10s
      #   order: start-first
      #   monitor: 10s
      #   failure_action: pause
      # rollback_config:
      #   parallelism: 1
      #   delay: 20s
      #   failure_action: pause
      #   monitor: 0s 
      #   max_failure_ratio: 0
      #   order: start-first

  preclient:
    # container_name: preclient
    image: localhost:5000/preclient:latest
    # build: ./preclient
    command: ["python", "main.py"]
    env_file:
      - .env
    # volumes:
      # - ${LOGS_PATH}:/logs
    # restart:
    #   always
    # depends_on:
    #   redis:
    #     condition: service_started
    #   rabbitmq:
    #     condition: service_healthy
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 60s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        monitor: 10s
        failure_action: pause
      rollback_config:
        parallelism: 1
        delay: 20s
        failure_action: pause
        monitor: 0s 
        max_failure_ratio: 0
        order: start-first
      # resources:
      #   limits:
      #     cpus: 2
      #     memory: 512M
      #   reservations:
      #     cpus: 1
      #     memory: 256M

  client:
    # container_name: client
    image: localhost:5000/client:latest
    # build: ./client
    command: ["python", "main.py"]
    env_file:
      - .env
    # restart:
    #   always
    # depends_on:
    #   rabbitmq:
    #     condition: service_healthy
    #   redis:
    #     condition: service_started
    volumes:
      # - type: volume
      #   source: media-data-volume
      #   target: /app/weights
      - type: volume
        source: voices-volume
        target: ${USER_VOICES}
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 60s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        monitor: 10s
        failure_action: pause
      rollback_config:
        parallelism: 1
        delay: 20s
        failure_action: pause
        monitor: 0s 
        max_failure_ratio: 0
        order: start-first
      # resources:
      #   limits:
      #     cpus: 7
      #     memory: 8G
      #   reservations:
      #     cpus: 3
      #     memory: 4G


  bot:
    # build: ./django_bot
    image: localhost:5000/bot:latest
    # container_name: bot
    command: ["python", "start_bot.py"]
    env_file:
      - .env
    volumes:
      - type: volume
        source: voices-volume
        target: ${USER_VOICES}
      # - type: volume
      #   source: media-data-volume
      #   target: ${MEDIA_DATA_VOLUME}
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 60s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        monitor: 10s
        failure_action: pause
      rollback_config:
        parallelism: 1
        delay: 20s
        failure_action: pause
        monitor: 0s 
        max_failure_ratio: 0
        order: start-first
      # resources:
      #   limits:
      #     cpus: 2
      #     memory: 512M
      #   reservations:
      #     cpus: 1
      #     memory: 256M


  django:
    # build: ./django_bot
    image: localhost:5000/django:latest
    # container_name: django
    command: sh -c 'python manage.py migrate --noinput && 
                    python manage.py collectstatic --noinput --clear &&
                    gunicorn config.asgi:application -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000'
    expose:
      - 8000
    # depends_on:
    #   db:
    #     condition: service_started
    # restart:
    #   always
    env_file:
      - .env
    volumes:
    #   - type: volume
    #     source: media-data-volume
    #     target: ${MEDIA_DATA_VOLUME}
      - type: volume
        source: static_volume
        target: /app/static
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 60s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        monitor: 10s
        failure_action: pause
      rollback_config:
        parallelism: 1
        delay: 20s
        failure_action: pause
        monitor: 0s 
        max_failure_ratio: 0
        order: start-first
      # resources:
      #   limits:
      #     cpus: 2
      #     memory: 512M
      #   reservations:
      #     cpus: 1
      #     memory: 256M

  proxyserver:
    # container_name: nginx
    image: nginx:latest
    ports:
      - "80:80"
    env_file:
      - .env
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - type: volume
        source: static_volume
        target: /app/static
    # restart:
    #   always
    # depends_on:
    #   - django
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 60s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        monitor: 10s
        failure_action: pause
      rollback_config:
        parallelism: 1
        delay: 20s
        failure_action: pause
        monitor: 0s 
        max_failure_ratio: 0
        order: start-first
      # resources:
      #   limits:
      #     cpus: 2
      #     memory: 512M
      #   reservations:
      #     cpus: 1
      #     memory: 256M

  paymentapi:
    # container_name: payment-api
    image: localhost:5000/payment-api
    command: sh -c 'uvicorn api:app --host 0.0.0.0 --port 8001 --proxy-headers'
    expose:
      - 8001
    env_file:
      - .env
    # restart:
    #   always
    # volumes:
    #   - ${LOGS_PATH}:/logs
    # depends_on:
    #   bot:
    #     condition: service_started
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 60s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        monitor: 10s
        failure_action: pause
      rollback_config:
        parallelism: 1
        delay: 20s
        failure_action: pause
        monitor: 0s 
        max_failure_ratio: 0
        order: start-first
      # resources:
      # limits:
      #   cpus: 2
      #   memory: 512M
      # reservations:
      #   cpus: 1
      #   memory: 256M

  paymentlistener:
    # container_name: payment-listener
    image: localhost:5000/payment-api
    command: ["python", "main.py"]
    env_file:
      - .env
    # restart:
    #   always
    # volumes:
    #   - ${LOGS_PATH}:/logs
    # depends_on:
    #   payment-api:
    #     condition: service_started
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 60s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        monitor: 10s
        failure_action: pause
      rollback_config:
        parallelism: 1
        delay: 20s
        failure_action: pause
        monitor: 0s 
        max_failure_ratio: 0
        order: start-first
      # resources:
      #   limits:
      #     cpus: 2
      #     memory: 512M
      #   reservations:
      #     cpus: 1
      #     memory: 256M

  scheduler:
    # container_name: scheduler
    image: localhost:5000/django:latest
    command: celery -A config beat -l info -S django_celery_beat.schedulers:DatabaseScheduler
    # depends_on:
    #   redis:
    #     condition: service_started
    #   bot:
    #     condition: service_started
    env_file:
      - .env
    # restart:
    #   always
    volumes:
      - type: volume
        source: voices-volume
        target: ${USER_VOICES}
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 60s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        monitor: 10s
        failure_action: pause
      rollback_config:
        parallelism: 1
        delay: 20s
        failure_action: pause
        monitor: 0s 
        max_failure_ratio: 0
        order: start-first
      # resources:
      #   limits:
      #     cpus: 2
      #     memory: 512M
      #   reservations:
      #     cpus: 1
      #     memory: 256M


volumes:
  static_volume:
  # media-data-volume:
  voices-volume:

