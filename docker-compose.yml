services:
  db:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: ['postgres', '-c', 'config_file=/etc/postgresql.conf']
    ports:
      - '5432:5432'
    restart: always
    volumes:
      - /home/postgres/backups:/backups
      - ./postgres.conf:/etc/postgresql.conf

  rabbitmq:
    image: rabbitmq:3.10.2-management
    hostname: rabbitmq
    container_name: rabbitmq
    restart: always
    volumes:
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    environment:
      - RABBITMQ_CONFIG_FILE=/etc/rabbitmq/rabbitmq.conf
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASSWORD}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 30s
      retries: 3
      start_period: 10s

  redis:
    container_name: redis
    image: redis
    command: ["redis-server", "/usr/local/etc/redis.conf"]
    ports:
      - "6379:6379"
    volumes:
      - ./redis.conf:/usr/local/etc/redis.conf
    env_file:
      - .env
    restart:
      always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5

  preclient:
    container_name: preclient
    build: ./preclient
    command: ["python", "main.py"]
    env_file:
      - .env
    restart:
      always
    volumes:
      - ${LOGS_PATH}:/logs
    depends_on:
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  client:
    container_name: client
    build: ./client
    command: ["python", "main.py"]
    env_file:
      - .env
    restart:
      always
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - type: volume
        source: media-data-volume
        target: /app/weights
      - type: volume
        source: voices-volume
        target: ${USER_VOICES}
      - ${LOGS_PATH}:/logs

  bot:
    build: ./django_bot
    container_name: bot
    command: ["python", "start_bot.py"]
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
    restart:
      always
    env_file:
      - .env
    volumes:
      - ${LOGS_PATH}:/logs
      - type: volume
        source: voices-volume
        target: ${USER_VOICES}
      - type: volume
        source: media-data-volume
        target: ${MEDIA_DATA_VOLUME}


  django:
    build: ./django_bot
    container_name: django
    command: sh -c 'python manage.py migrate --noinput && 
                    python manage.py collectstatic --noinput --clear &&
                    gunicorn config.asgi:application -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8092'
    ports:
      - "8092:8092"
    network_mode: host
    depends_on:
      db:
        condition: service_started
    restart:
      always
    env_file:
      - .env
    volumes:
      - type: volume
        source: media-data-volume
        target: ${MEDIA_DATA_VOLUME}
      - type: volume
        source: static_volume
        target: /app/static

  proxy-server:
    container_name: nginx
    image: nginx:latest
    ports:
      - "8081:8092"
      - "8001:8001"
      - "3000:3000"
    env_file:
      - .env
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - type: volume
        source: static_volume
        target: /app/static
    restart:
      always
    depends_on:
      django:
        condition: service_started
      payment-api:
        condition: service_started

  payment-api:
    container_name: payment-api
    build: ./payment-service
    command: sh -c 'uvicorn api:app --host 0.0.0.0 --port 8001 --proxy-headers'
    expose:
      - 8001
    env_file:
      - .env
    restart:
      always
    volumes:
      - ${LOGS_PATH}:/logs
    depends_on:
      bot:
        condition: service_started

  payment-listener:
    container_name: payment-listener
    build: ./payment-service
    command: ["python", "main.py"]
    env_file:
      - .env
    restart:
      always
    volumes:
      - ${LOGS_PATH}:/logs
    depends_on:
      payment-api:
        condition: service_started

  celery-scheduler:
    container_name: celery-scheduler
    build: ./django_bot
    command: celery --app config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_started
      bot:
        condition: service_started
    restart:
      always


  celery-worker:
    container_name: celery-worker
    build: ./django_bot
    command: celery --app config worker --loglevel=info
    depends_on:
      celery-scheduler:
        condition: service_started
    env_file:
      - .env
    restart:
      always
    volumes:
      - type: volume
        source: voices-volume
        target: ${USER_VOICES}

  grafana-monitor:
    container_name: grafana-monitor
    image: grafana/grafana-oss
    restart: unless-stopped
    environment:
      - GF_LOG_LEVEL=info
      - GF_INSTALL_PLUGINS=redis-datasource
    expose:
      - 3000
    volumes:
      - grafana_storage:/var/lib/grafana

volumes:
  static_volume:
  media-data-volume:
  voices-volume:
  grafana_storage: {}

