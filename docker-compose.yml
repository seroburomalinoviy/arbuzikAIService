services:
  db:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - '5432:5432'
    restart: always
    volumes:
      - /home/postgres/db_data:/var/lib/postgresql/data
      - /home/postgres/backups:/backups

  rabbitmq:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    container_name: rabbitmq
    restart: always
    volumes:
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
#      - ${LOGS_PATH}:/var/log/rabbitmq/logs:ro
    environment:
      - RABBITMQ_CONFIG_FILE=/etc/rabbitmq/rabbitmq.conf
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASSWORD}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 30s
      retries: 3
      start_period: 10s

  redis:
    container_name: redis
    image: redis
    command:
      - /bin/sh
      - -c
      # - Double dollars, so that the variable is not expanded by Docker Compose
      # - Surround by quotes, so that the shell does not split the password
      # - The ${variable:?message} syntax causes shell to exit with a non-zero
      #   code and print a message, when the variable is not set or empty
      - redis-server /usr/local/etc/redis.conf --requirepass "$${REDIS_PASSWORD:?REDIS_PASSWORD variable is not set}"
    ports:
      - "6379:6379"
    volumes:
      - ./redis.conf:/usr/local/etc/redis.conf
      - ${LOGS_PATH}:/var/log/redis
    env_file:
      - .env
    restart:
      always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
#    deploy:
#      resources:
#        limits:
#          cpus: '0.50'
#          memory: 512M
#        reservations:
#          cpus: '0.25'
#          memory: 256M

  preclient:
    container_name: preclient
    build: ./preclient
    command: ["python", "main.py"]
    env_file:
      - .env
    restart:
      always
    volumes:
      - ${LOGS_PATH}:/logs
    depends_on:
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  client:
    container_name: client
    build: ./client
    command: ["python", "main.py"]
    env_file:
      - .env
    restart:
      always
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - type: volume
        source: media-data-volume
        target: /app/weights
      - type: volume
        source: voices-volume
        target: ${USER_VOICES}
      - ${LOGS_PATH}:/logs

  bot:
    build: ./django_bot
    container_name: bot
    command: ["python", "start_bot.py"]
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
    restart:
      always
    env_file:
      - .env
    volumes:
      - ${LOGS_PATH}:/logs
      - type: volume
        source: voices-volume
        target: ${USER_VOICES}
      - type: volume
        source: media-data-volume
        target: ${MEDIA_DATA_VOLUME}


  django:
    build: ./django_bot
    container_name: django
    command: sh -c 'python manage.py migrate --noinput && 
                    python manage.py collectstatic --noinput --clear &&
                    gunicorn config.asgi:application -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000'
    expose:
      - 8000
    depends_on:
      db:
        condition: service_started
    restart:
      always
    env_file:
      - .env
    volumes:
      - type: volume
        source: media-data-volume
        target: ${MEDIA_DATA_VOLUME}
      - type: volume
        source: static_volume
        target: /app/static

  proxy-server:
    container_name: nginx
    image: nginx:latest
    ports:
      - "80:80"
      - "8001:8001"
    env_file:
      - .env
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - type: volume
        source: static_volume
        target: /app/static
    restart:
      always
    depends_on:
      django:
        condition: service_started
      payment-api:
        condition: service_started

  payment-api:
    container_name: payment-api
    build: ./payment-service
    command: sh -c 'uvicorn api:app --host 0.0.0.0 --port 8001 --proxy-headers'
    expose:
      - 8001
    env_file:
      - .env
    restart:
      always
    volumes:
      - ${LOGS_PATH}:/logs
    depends_on:
      bot:
        condition: service_started

  payment-listener:
    container_name: payment-listener
    build: ./payment-service
    command: ["python", "main.py"]
    env_file:
      - .env
    restart:
      always
    volumes:
      - ${LOGS_PATH}:/logs
    depends_on:
      payment-api:
        condition: service_started

  scheduler:
    container_name: scheduler
    build: ./django_bot
    command: celery -A config beat -l info -S django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      redis:
        condition: service_started
      bot:
        condition: service_started
    env_file:
      - .env
    restart:
      always

volumes:
  static_volume:
  media-data-volume:
  voices-volume:

