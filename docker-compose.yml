services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - '5432:5432'
    restart: always
    volumes:
      - /home/postgres/db_data:/var/lib/postgresql/data

  backup:
    image: postgres:13
    container_name: postgres_backup
    depends_on:
      - db
    entrypoint: [ "sh", "-c", "while true; do sleep 24h; pg_dump -h db -U $POSTGRES_USER $POSTGRES_DB > /backups/db_backup_$(date +%F_%H-%M-%S).sql; done" ]
#    entrypoint: ./entrypoint-backup.sh
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - /home/postgres/backups:/backups
    restart: always

  rabbitmq:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    container_name: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASSWORD}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 30s
      retries: 3
      start_period: 10s

  redis:
    container_name: redis
    image: redis
    command: ["redis-server"]
    ports:
      - "6379:6379"
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    restart:
      always

  preclient:
    container_name: preclient
    build: ./preclient
    command: ["python", "main.py"]
    env_file:
      - .env
    restart:
      always
    depends_on:
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  client:
    container_name: client
    build: ./client
    command: ["python", "main.py"]
    env_file:
      - .env
    restart:
      always
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - type: volume
        source: media-data-volume
        target: /app/weights
      - type: volume
        source: voices-volume
        target: ${USER_VOICES}

  bot:
    build: ./django_bot
    container_name: bot
    command: ["python", "start_bot.py"]
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_started
    restart:
      always
    env_file:
      - .env
    volumes:
      - type: volume
        source: voices-volume
        target: ${USER_VOICES}
      - type: volume
        source: media-data-volume
        target: ${MEDIA_DATA_VOLUME}


  django:
    build: ./django_bot
    container_name: django
    command: sh -c 'python manage.py migrate --noinput && 
                    python manage.py collectstatic --noinput --clear &&
                    gunicorn config.asgi:application -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000'
    expose:
      - 8000
    depends_on:
      postgres:
        condition: service_started
    restart:
      always
    env_file:
      - .env
    volumes:
      - type: volume
        source: media-data-volume
        target: ${MEDIA_DATA_VOLUME}
      - type: volume
        source: static_volume
        target: /app/static

  proxy-server:
    container_name: nginx
    image: nginx:latest
    ports:
      - "80:80"
    env_file:
      - .env
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - type: volume
        source: static_volume
        target: /app/static
    restart:
      always
    depends_on:
      - django


volumes:
  static_volume:
  media-data-volume:
  voices-volume:

