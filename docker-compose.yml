services:
  db:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - '5432:5432'
    restart: always
    volumes:
      - $HOME/postgresql/data:/var/lib/postgresql/data

  broker:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    container_name: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASSWORD}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit disk_free_limit 2147483648
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      # test: ["CMD", "curl", "-f", "http://localhost:15672"]
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 30s
      retries: 3
      start_period: 10s

  cache:
    container_name: redis
    image: redis
    command: ["redis-server"]
    ports:
      - "6379:6379"
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
      - $HOME/redis/data:/root/redis
    # depends_on:
    #   - bot
    restart:
      always

  preclient:
    container_name: preclient
    build: ./preclient
    command: ["python", "main.py"]
    env_file:
      - .env
    restart:
      always
    depends_on:
      cache:
        condition: service_started
      broker:
        condition: service_healthy

  client:
    container_name: client
    build: ./client
    command: ["python", "main.py"]
    env_file:
      - .env
    restart:
      always
    depends_on:
      broker:
        condition: service_healthy
      cache:
        condition: service_started
    volumes:
      - type: volume
        source: models-volume
        target: /app/weights
        read_only: True
      - type: volume
        source: raw-voices-volume
        target: ${USER_VOICES_RAW_VOLUME}
        read_only: True
      - type: volume
        source: processed-voices-volume
        target: ${USER_VOICES_PROCESSED_VOLUME}

  bot:
    build: ./django_bot
    container_name: bot
    command: ["python", "start_bot.py"]
    depends_on:
      broker:
        condition: service_healthy
      db:
        condition: service_started
    restart:
      always
    env_file:
      - .env
    volumes:
      - type: volume
        source: raw-voices-volume
        target: ${USER_VOICES_RAW_VOLUME}
      - type: volume
        source: processed-voices-volume
        target: ${USER_VOICES_PROCESSED_VOLUME}
      - ~/dem-volume:${DEM_VOLUME}
      - ~/covers-volume:/app/media/covers

  adminka:
    build: ./django_bot
    container_name: django
    command: sh -c 'python manage.py makemigrations && 
                    python manage.py migrate &&
                    python manage.py runserver 0.0.0.0:3000'
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_started
    restart:
      always
    env_file:
      - .env
    volumes:
      - type: volume
        source: models-volume
        target: ${MODELS_VOLUME}
      - ~/dem-volume:/app/media/dem/
      - ~/covers-volume:/app/media/covers


#  contentDistributer-nginx:
#    container_name: nginx
#    image: nginx:latest
#    ports:
#      - "80:80"
#    env_file:
#      - .env
#    volumes:
#      - ~/covers-volume:/data/covers:rw
##      - ./my_nginx.conf:/etc/nginx/nginx.conf
#      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
#    restart:
#      always


volumes:
  models-volume:
  covers-volume:
  dem-volume:
  processed-voices-volume:
  raw-voices-volume:

